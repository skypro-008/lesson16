{
  "environment" : "unittest",
  "summary" : "Skypro. Урок 16 Часть 2. Практика",
  "title" : "skypro.lesson_16.part_2",
  "authors" : [
    "Skypro"
  ],
  "programming_language" : "Python",
  "language" : "en",
  "course_type" : "PyCharm",
  "items" : [
    {
      "title" : "lesson1",
      "task_list" : [
        {
          "name" : "task1",
          "files" : {
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nimport sqlalchemy\n\n\nclass TestCase(unittest.TestCase):\n    def test(self):\n        try:\n            from task import Guide, Excursion\n        except ImportError:\n            self.fail(\"Не правильное имя класса Guide, Excursion\")\n        except sqlalchemy.exc.ArgumentError:\n            self.fail(\"Ошибка в синтаксисе модели, не задан атрибут primaryKey или что-то еще\")\n        try:\n            from task import db\n        except ImportError:\n            self.fail(\"Отсутствует переменная db, которая была изначально\")\n\n        db.drop_all()\n        db.create_all()\n\n        guide = Guide(id=1, name='name', main_speciality=\"spec\", country=\"Russia\")\n        exc = Excursion(id=1, name='name', guide_id=1)\n\n        with db.session.begin():\n            db.session.add(guide)\n        with db.session.begin():\n            db.session.add(exc)\n"
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "task.py" : {
              "name" : "task.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "from flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy import Column, Integer, String, ForeignKey\nfrom sqlalchemy.orm import relationship\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\n\n\nclass Guide(db.Model):\n    __tablename__ = 'guide'\n\n\nclass Excursion(db.Model):\n    __tablename__ = 'excursion'\n"
            },
            "uml_2.png" : {
              "name" : "uml_2.png",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            }
          },
          "description_text" : "# Skypro. Lesson 16. Part 1\n\n## Дано\n\nUML диаграмма классов\n\n![UML диаграмма классов](uml_2.png)\n\n## Надо\n\nНапишите модели.",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "task2",
          "files" : {
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "task.py" : {
              "name" : "task.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "from flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy import Column, Integer, String, SmallInteger, ForeignKey\nfrom sqlalchemy.orm import relationship\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\n\nclass Author(db.Model):\n    __tablename__ = 'author'\n\nclass Book(db.Model):\n    __tablename__ = 'book'"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nimport sqlalchemy\n\n\nclass TestCase(unittest.TestCase):\n    def test(self):\n        try:\n            from task import Author, Book\n        except ImportError:\n            self.fail(\"Не правильное имя класса Author, Book\")\n        except sqlalchemy.exc.ArgumentError:\n            self.fail(\"Ошибка в синтаксисе модели, не задан атрибут primaryKey или что-то еще\")\n        try:\n            from task import db\n        except ImportError:\n            self.fail(\"Отсутствует переменная db, которая была изначально\")\n\n        db.drop_all()\n        db.create_all()\n\n        author = Author(id=1, first_name='name', last_name=\"spec\")\n        book = Book(id=1, title='name', copyright=1, author_id=1)\n\n        with db.session.begin():\n            db.session.add(author)\n        with db.session.begin():\n            db.session.add(book)\n"
            },
            "uml_1.png" : {
              "name" : "uml_1.png",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            }
          },
          "description_text" : "# Skypro. Lesson 16. Part 1\n\n## Дано\n\nUML диаграмма классов.\n![UML диаграмма классов](uml_1.png)\n\n## Надо\n\nНапишите модели.",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "task3",
          "files" : {
            "task.py" : {
              "name" : "task.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "from flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy import Column, Integer, String, Text, SmallInteger, ForeignKey, CheckConstraint\nfrom sqlalchemy.orm import relationship\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\n\n# solution\nclass Singer(db.Model):\n    __tablename__ = 'singer'\n    id = Column(Integer, primary_key=True)\n    name = Column(String, unique=True)\n    age = Column(Integer, CheckConstraint(\"age < 35\"))\n    group = Column(String, nullable=False)\n# ------------------------------------"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nimport sqlalchemy\n\n\nclass TestCase(unittest.TestCase):\n    def test(self):\n        try:\n            from task import Singer\n        except ImportError:\n            self.fail(\"Не правильное имя класса Singer\")\n        except sqlalchemy.exc.ArgumentError:\n            self.fail(\"Ошибка в синтаксисе модели, не задан атрибут primaryKey или что-то еще\")\n        try:\n            from task import db\n        except ImportError:\n            self.fail(\"Отсутствует переменная db, которая была изначально\")\n\n        db.drop_all()\n        db.create_all()\n\n        goodSinger = Singer(id=1, name=\"name1\", age=30, group=\"lessthan30\")\n        try:\n            with db.session.begin():\n                db.session.add(goodSinger)\n        except Exception as e:\n            self.fail(\n                \"Есть ошибки в модели. Вот такие ХОРОШИЕ данные НЕ вставились: id=1, name='name', age=30, group=\\\"lessthan30\\\"\")\n\n        duplName = Singer(id=2, name='name1', age=30, group=\"abcdef\")\n        was_exception = False\n        try:\n            with db.session.begin():\n                db.session.add(duplName)\n        except Exception as e:\n            was_exception = True\n\n        if not was_exception:\n            self.fail(\"Есть ошибки в модели. Нет ограничения уникальности колонки name\")\n\n        bigAge = Singer(id=3, name='name3', age=40, group=\"abcdef\")\n        was_exception = False\n        try:\n            with db.session.begin():\n                db.session.add(bigAge)\n        except Exception as e:\n            was_exception = True\n\n        if not was_exception:\n            self.fail(\"Есть ошибки в модели. Нет ограничения ограничения возраста (< 35 лет)\")\n\n        noneGroup = Singer(id=4, name='name4', age=30, group=None)\n        was_exception = False\n        try:\n            with db.session.begin():\n                db.session.add(noneGroup)\n        except Exception as e:\n            was_exception = True\n\n        if not was_exception:\n            self.fail(\"Есть ошибки в модели. Нет ограничения обязательности (not null) группы\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "# Skypro. Lesson 16. Part 1\n\n## Дано\n\nТаблица Singer, вот такие колонки:\n- Идентификатор - основной ключ (PK) - id\n- Имя - должно быть уникальным - name\n- Возраст - не больше 35 лет - age\n- Инструмент - либо guitar, либо piano - instrument\n- Группа - не может быть Null (None) - group\n\n## Надо\n\nНаписать модель.",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "task4",
          "files" : {
            "task.py" : {
              "name" : "task.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "from flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy import Column, Integer, String, Boolean, Text, SmallInteger, ForeignKey, CheckConstraint\nfrom sqlalchemy.orm import relationship\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'\ndb = SQLAlchemy(app)\n\n\nclass Guide(db.Model):\n    __tablename__ = 'guide'\n\n\ndef do_request():\n    return result\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nimport sqlalchemy\n\ndata = [{'user': 2, 'surname': 'Васечкин', 'full_name': 'Андрей Васечкин', 'tours_count': 5,\n         'bio': 'Я обожаю Москву, и изучаю город с необычных ракурсов. С радостью поделюсь с вами своими лучшими открытиями. Мы поднимемся на сталинские высотки и посмотрим на исторический центр сверху. Я покажу вам то, что скрыто от глаз большинства туристов и даже жителей города. Маршруты подобра индивидуально под ваш запрос. Для влюбленных доступна услуга свидания на крыше.',\n         'is_pro': True, 'company': 1},\n        {'user': 1, 'surname': 'Новикова', 'full_name': 'Людмила Новикова', 'tours_count': 2,\n         'bio': 'Я петербурженка в 7-м поколении. Люблю делиться историями и секретами дореволюционных петербургских зданий и особняков. Поделюсь историями моей бабушки. Вместе со мной работает небольшая дружная команда влюбленных в Петербург местных гидов. Мы раскроем вам секреты старинных домов и покажем то, что скрыто от глаз большинства туристов и жителей города.',\n         'is_pro': True, 'company': 2},\n        {'user': 3, 'surname': 'Беридзе', 'full_name': 'Георги Беридзе', 'tours_count': 5,\n         'bio': 'Филолог-журналист по образованию. За плечами более 9 лет экскурсий по Грузии и барменский опыт. Писатель. Перфекционист. И просто увлеченный человек. Родился и вырос в Тбилиси. Более 10-поколений тут. Люблю этот райский уголок на планете и свою работу. Мама-кулинар привила любовь ко вкусной еде.',\n         'is_pro': True, 'company': None},\n        {'user': 4, 'surname': 'Ласкина', 'full_name': 'Оксана Ласкина', 'tours_count': 2,\n         'bio': 'Я всегда увлекалась историей и, как следствие, получила образования гида-экскурсовода. С удовольствием знакомлю гостей города с историей, татарской культурой и традициями. Вы влюбитесь в наш край.',\n         'is_pro': True, 'company': 5},\n        {'user': 5, 'surname': 'Горячий', 'full_name': 'Иван Горячий', 'tours_count': 7,\n         'bio': 'Работал учителем истории более 10 лет, последние 5 лет живу в Сочи и уже третий год провожу экскурсии, орагнизовываю туры. На моих прогулках и турах вы узнаете не только об экскурсионных объектах, но и о том, чем живет современный Сочи: о ценах, недвижимости, об интересных местах города и его необычных заведениях. Есть туры разного уровня сложности и комфорта, где можно с детьми и без. Бесплатным бонусом ко всем экскурсиям станет фотосессия на зеркальный фотоаппарат.',\n         'is_pro': True, 'company': 4},\n        {'user': 6, 'surname': 'Ивлева', 'full_name': 'Яна Ивлева', 'tours_count': 5,\n         'bio': 'Я живу в Стамбуле много лет. По образованию филолог и историк. О Стамбуле читаю, пишу, живуэтим городом и люблю его. Раскрою его вам таким, какой он есть: великолепный, приветливый, неизменно интересный и всегда загадочный. Ваше путешествие по этому сказочному городу навсегда осталось в памяти и сердце. ',\n         'is_pro': True, 'company': 1},\n        {'user': 7, 'surname': 'Самидзе', 'full_name': 'Ирина Самидзе', 'tours_count': 1,\n         'bio': 'Живу в Риме уже более десяти лет и с каждым днем влюбляюсь в этот город все больше и больше. Моя миссия в том, чтобы и вы почувствовали после нашей прогулки то же самое. Приглашаю вас познакомиться с Вечным городом и увидеть его глазами местного жителя, прочувствовать всю атмосферу и колорит столицы. Насладиться видами, едой и историей этого города.',\n         'is_pro': False, 'company': None},\n        {'user': 8, 'surname': 'Ванькин', 'full_name': 'Владислав Ванькин', 'tours_count': 1,\n         'bio': 'Хеллоу! 11 лет писал для тревел-журналов, потом кризис среднего возраста, желание перемен и внезапный переезд в Псков, где впервые почувствовал себя дома. Провожу экскурсии-погружения по местам, которые не оставят вас равнодушным. Приглашаю вас в путешествие по Изборску и живописным окрестностям — на пару часов или дней. Показываю и открываю самые живописные тропы, знакомлю с местными жителями — фермерами и ремесленниками, а из множества исторических фактов — выбираю действительно важные и интересные ;)',\n         'is_pro': False, 'company': None},\n        {'user': 9, 'surname': 'Левинова', 'full_name': 'Дина Левинова', 'tours_count': 1,\n         'bio': 'Авторизированный гид, член Ассоциации профессиональных гидов Хельсинки, член клуба Знатоков города и рабочей комиссии университета. По жизни: живу в Финляндии 35 лет. 23 из них - работала в турсфере, а также гидом для души, т.к. очень люблю это дело. Исходила город вдоль и поперек, замучала рассказами родных и друзей, прочитала сотню, а то и больше книг, и провела сотни часов в архивах. Н не перестаю находить новые интересные факты, истории, места, которые и хочу показать гостям. Покажу город дркгим, не так как о его обычно показывают и описывают в экскурсияя на один день из Питера и пишут в большистве путеводителей. Открою вам новый Хельсинки, каким его вижу я: с плюсами и минусами, поделюсь радостными и печальными фактами истории, а также секретами, легендами, реалиями сегодняшнего дня.',\n         'is_pro': True, 'company': None},\n        {'user': 10, 'surname': 'Звонкий', 'full_name': 'Марк Звонкий', 'tours_count': 1,\n         'bio': 'Спорю, что такой экскурсии у вас еще не было. Я организую туры с закрытыми глазами. Да-да, вы все верно прочитали. Но какой в этом смыcл, если ничего не видно? Без одного из главных органов восприятия, город ощущается совсем иначе. Вас ждет по-настоящему необычное путешествие, которое надолго запомнится своими хорошими эмоциями.',\n         'is_pro': False, 'company': None}]\n\n\nclass TestCase(unittest.TestCase):\n    def test(self):\n        try:\n            from task import do_request, Guide\n        except ImportError:\n            self.fail(\"Не правильное имя класса Guide, Excursion\")\n        except sqlalchemy.exc.ArgumentError:\n            self.fail(\"Ошибка в синтаксисе модели, не задан атрибут primaryKey или что-то еще\")\n        try:\n            from task import db\n        except ImportError:\n            self.fail(\"Отсутствует переменная db, которая была изначально\")\n\n        db.drop_all()\n        db.create_all()\n\n        for d in data:\n            guide = Guide(id=d.get(\"user\"),\n                          surname=d.get(\"surname\"),\n                          full_name=d.get(\"full_name\"),\n                          tours_count=d.get(\"tours_count\"),\n                          bio=d.get(\"bio\"),\n                          is_pro=d.get(\"is_pro\"),\n                          company=d.get(\"company\"),\n                          )\n            with db.session.begin():\n                db.session.add(guide)\n\n        result = do_request()\n        solution = [2, 3, 5, 6]\n        self.assertTrue(len(result) == len(solution), msg=\"Запрос написан не корректно\")\n        for r in result:\n            self.assertTrue(r.id in solution, msg=\"Запрос написан не корректно\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "# Skypro. Lesson 16. Part 1\n\n## Дано\n\nТаблица ‘guides’ с данными.\n\n\n## Надо\n\nНайти всех гидов, кто провел больше 3 туров (tours_count > 3)",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "task5",
          "files" : {
            "task.py" : {
              "name" : "task.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "from flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy import Column, Integer, String, Boolean, Text, SmallInteger, ForeignKey, CheckConstraint\nfrom sqlalchemy.orm import relationship\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\n\n\nclass Guide(db.Model):\n    __tablename__ = 'guide'\n\n\ndef do_request():\n    return result\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nimport sqlalchemy\n\ndata = [{'user': 2, 'surname': 'Васечкин', 'full_name': 'Андрей Васечкин', 'tours_count': 5,\n         'bio': 'Я обожаю Москву, и изучаю город с необычных ракурсов. С радостью поделюсь с вами своими лучшими открытиями. Мы поднимемся на сталинские высотки и посмотрим на исторический центр сверху. Я покажу вам то, что скрыто от глаз большинства туристов и даже жителей города. Маршруты подобра индивидуально под ваш запрос. Для влюбленных доступна услуга свидания на крыше.',\n         'is_pro': True, 'company': 1},\n        {'user': 1, 'surname': 'Новикова', 'full_name': 'Людмила Новикова', 'tours_count': 2,\n         'bio': 'Я петербурженка в 7-м поколении. Люблю делиться историями и секретами дореволюционных петербургских зданий и особняков. Поделюсь историями моей бабушки. Вместе со мной работает небольшая дружная команда влюбленных в Петербург местных гидов. Мы раскроем вам секреты старинных домов и покажем то, что скрыто от глаз большинства туристов и жителей города.',\n         'is_pro': True, 'company': 2},\n        {'user': 3, 'surname': 'Беридзе', 'full_name': 'Георги Беридзе', 'tours_count': 5,\n         'bio': 'Филолог-журналист по образованию. За плечами более 9 лет экскурсий по Грузии и барменский опыт. Писатель. Перфекционист. И просто увлеченный человек. Родился и вырос в Тбилиси. Более 10-поколений тут. Люблю этот райский уголок на планете и свою работу. Мама-кулинар привила любовь ко вкусной еде.',\n         'is_pro': True, 'company': None},\n        {'user': 4, 'surname': 'Ласкина', 'full_name': 'Оксана Ласкина', 'tours_count': 2,\n         'bio': 'Я всегда увлекалась историей и, как следствие, получила образования гида-экскурсовода. С удовольствием знакомлю гостей города с историей, татарской культурой и традициями. Вы влюбитесь в наш край.',\n         'is_pro': True, 'company': 5},\n        {'user': 5, 'surname': 'Горячий', 'full_name': 'Иван Горячий', 'tours_count': 7,\n         'bio': 'Работал учителем истории более 10 лет, последние 5 лет живу в Сочи и уже третий год провожу экскурсии, орагнизовываю туры. На моих прогулках и турах вы узнаете не только об экскурсионных объектах, но и о том, чем живет современный Сочи: о ценах, недвижимости, об интересных местах города и его необычных заведениях. Есть туры разного уровня сложности и комфорта, где можно с детьми и без. Бесплатным бонусом ко всем экскурсиям станет фотосессия на зеркальный фотоаппарат.',\n         'is_pro': True, 'company': 4},\n        {'user': 6, 'surname': 'Ивлева', 'full_name': 'Яна Ивлева', 'tours_count': 5,\n         'bio': 'Я живу в Стамбуле много лет. По образованию филолог и историк. О Стамбуле читаю, пишу, живуэтим городом и люблю его. Раскрою его вам таким, какой он есть: великолепный, приветливый, неизменно интересный и всегда загадочный. Ваше путешествие по этому сказочному городу навсегда осталось в памяти и сердце. ',\n         'is_pro': True, 'company': 1},\n        {'user': 7, 'surname': 'Самидзе', 'full_name': 'Ирина Самидзе', 'tours_count': 1,\n         'bio': 'Живу в Риме уже более десяти лет и с каждым днем влюбляюсь в этот город все больше и больше. Моя миссия в том, чтобы и вы почувствовали после нашей прогулки то же самое. Приглашаю вас познакомиться с Вечным городом и увидеть его глазами местного жителя, прочувствовать всю атмосферу и колорит столицы. Насладиться видами, едой и историей этого города.',\n         'is_pro': False, 'company': None},\n        {'user': 8, 'surname': 'Ванькин', 'full_name': 'Владислав Ванькин', 'tours_count': 1,\n         'bio': 'Хеллоу! 11 лет писал для тревел-журналов, потом кризис среднего возраста, желание перемен и внезапный переезд в Псков, где впервые почувствовал себя дома. Провожу экскурсии-погружения по местам, которые не оставят вас равнодушным. Приглашаю вас в путешествие по Изборску и живописным окрестностям — на пару часов или дней. Показываю и открываю самые живописные тропы, знакомлю с местными жителями — фермерами и ремесленниками, а из множества исторических фактов — выбираю действительно важные и интересные ;)',\n         'is_pro': False, 'company': None},\n        {'user': 9, 'surname': 'Левинова', 'full_name': 'Дина Левинова', 'tours_count': 1,\n         'bio': 'Авторизированный гид, член Ассоциации профессиональных гидов Хельсинки, член клуба Знатоков города и рабочей комиссии университета. По жизни: живу в Финляндии 35 лет. 23 из них - работала в турсфере, а также гидом для души, т.к. очень люблю это дело. Исходила город вдоль и поперек, замучала рассказами родных и друзей, прочитала сотню, а то и больше книг, и провела сотни часов в архивах. Н не перестаю находить новые интересные факты, истории, места, которые и хочу показать гостям. Покажу город дркгим, не так как о его обычно показывают и описывают в экскурсияя на один день из Питера и пишут в большистве путеводителей. Открою вам новый Хельсинки, каким его вижу я: с плюсами и минусами, поделюсь радостными и печальными фактами истории, а также секретами, легендами, реалиями сегодняшнего дня.',\n         'is_pro': True, 'company': None},\n        {'user': 10, 'surname': 'Звонкий', 'full_name': 'Марк Звонкий', 'tours_count': 1,\n         'bio': 'Спорю, что такой экскурсии у вас еще не было. Я организую туры с закрытыми глазами. Да-да, вы все верно прочитали. Но какой в этом смыcл, если ничего не видно? Без одного из главных органов восприятия, город ощущается совсем иначе. Вас ждет по-настоящему необычное путешествие, которое надолго запомнится своими хорошими эмоциями.',\n         'is_pro': False, 'company': None}]\n\n\nclass TestCase(unittest.TestCase):\n    def test(self):\n        try:\n            from task import do_request, Guide\n        except ImportError:\n            self.fail(\"Не правильное имя класса do_request, Guide\")\n        except sqlalchemy.exc.ArgumentError:\n            self.fail(\"Ошибка в синтаксисе модели, не задан атрибут primaryKey или что-то еще\")\n        try:\n            from task import db\n        except ImportError:\n            self.fail(\"Отсутствует переменная db, которая была изначально\")\n\n        db.drop_all()\n        db.create_all()\n\n        for d in data:\n            guide = Guide(id=d.get(\"user\"),\n                          surname=d.get(\"surname\"),\n                          full_name=d.get(\"full_name\"),\n                          tours_count=d.get(\"tours_count\"),\n                          bio=d.get(\"bio\"),\n                          is_pro=d.get(\"is_pro\"),\n                          company=d.get(\"company\"),\n                          )\n            with db.session.begin():\n                db.session.add(guide)\n\n        result = do_request()\n        solution = [3, 7, 8, 9, 10]\n        self.assertTrue(len(result) == len(solution), msg=\"Запрос написан не корректно\")\n        for r in result:\n            self.assertTrue(r.id in solution, msg=\"Запрос написан не корректно\")"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "# Skypro. Lesson 16. Part 1\n\n## Дано\n\nТаблица ‘guides’ с данными.\n\n\n## Надо\n\nНадо: Найти всех гидов у которых нет компании (company = None)",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "task6",
          "files" : {
            "task.py" : {
              "name" : "task.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "from flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy import Column, Integer, String, Boolean, Text, SmallInteger, ForeignKey, CheckConstraint\nfrom sqlalchemy.orm import relationship\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\n\n\nclass Guide(db.Model):\n    __tablename__ = 'guide'\n    id = Column(Integer, primary_key=True)\n    surname = Column(String)\n    full_name = Column(String)\n    tours_count = Column(Integer)\n    bio = Column(String)\n    is_pro = Column(Boolean)\n    company = Column(Integer)\n\n\ndef update_tours_count():\n    pass\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nimport sqlalchemy\n\ndata = [{'user': 2, 'surname': 'Васечкин', 'full_name': 'Андрей Васечкин', 'tours_count': 5,\n         'bio': 'Я обожаю Москву, и изучаю город с необычных ракурсов. С радостью поделюсь с вами своими лучшими открытиями. Мы поднимемся на сталинские высотки и посмотрим на исторический центр сверху. Я покажу вам то, что скрыто от глаз большинства туристов и даже жителей города. Маршруты подобра индивидуально под ваш запрос. Для влюбленных доступна услуга свидания на крыше.',\n         'is_pro': True, 'company': 1},\n        {'user': 1, 'surname': 'Новикова', 'full_name': 'Людмила Новикова', 'tours_count': 2,\n         'bio': 'Я петербурженка в 7-м поколении. Люблю делиться историями и секретами дореволюционных петербургских зданий и особняков. Поделюсь историями моей бабушки. Вместе со мной работает небольшая дружная команда влюбленных в Петербург местных гидов. Мы раскроем вам секреты старинных домов и покажем то, что скрыто от глаз большинства туристов и жителей города.',\n         'is_pro': True, 'company': 2},\n        {'user': 3, 'surname': 'Беридзе', 'full_name': 'Георги Беридзе', 'tours_count': 5,\n         'bio': 'Филолог-журналист по образованию. За плечами более 9 лет экскурсий по Грузии и барменский опыт. Писатель. Перфекционист. И просто увлеченный человек. Родился и вырос в Тбилиси. Более 10-поколений тут. Люблю этот райский уголок на планете и свою работу. Мама-кулинар привила любовь ко вкусной еде.',\n         'is_pro': True, 'company': None},\n        {'user': 4, 'surname': 'Ласкина', 'full_name': 'Оксана Ласкина', 'tours_count': 2,\n         'bio': 'Я всегда увлекалась историей и, как следствие, получила образования гида-экскурсовода. С удовольствием знакомлю гостей города с историей, татарской культурой и традициями. Вы влюбитесь в наш край.',\n         'is_pro': True, 'company': 5},\n        {'user': 5, 'surname': 'Горячий', 'full_name': 'Иван Горячий', 'tours_count': 7,\n         'bio': 'Работал учителем истории более 10 лет, последние 5 лет живу в Сочи и уже третий год провожу экскурсии, орагнизовываю туры. На моих прогулках и турах вы узнаете не только об экскурсионных объектах, но и о том, чем живет современный Сочи: о ценах, недвижимости, об интересных местах города и его необычных заведениях. Есть туры разного уровня сложности и комфорта, где можно с детьми и без. Бесплатным бонусом ко всем экскурсиям станет фотосессия на зеркальный фотоаппарат.',\n         'is_pro': True, 'company': 4},\n        {'user': 6, 'surname': 'Ивлева', 'full_name': 'Яна Ивлева', 'tours_count': 5,\n         'bio': 'Я живу в Стамбуле много лет. По образованию филолог и историк. О Стамбуле читаю, пишу, живуэтим городом и люблю его. Раскрою его вам таким, какой он есть: великолепный, приветливый, неизменно интересный и всегда загадочный. Ваше путешествие по этому сказочному городу навсегда осталось в памяти и сердце. ',\n         'is_pro': True, 'company': 1},\n        {'user': 7, 'surname': 'Самидзе', 'full_name': 'Ирина Самидзе', 'tours_count': 1,\n         'bio': 'Живу в Риме уже более десяти лет и с каждым днем влюбляюсь в этот город все больше и больше. Моя миссия в том, чтобы и вы почувствовали после нашей прогулки то же самое. Приглашаю вас познакомиться с Вечным городом и увидеть его глазами местного жителя, прочувствовать всю атмосферу и колорит столицы. Насладиться видами, едой и историей этого города.',\n         'is_pro': False, 'company': None},\n        {'user': 8, 'surname': 'Ванькин', 'full_name': 'Владислав Ванькин', 'tours_count': 1,\n         'bio': 'Хеллоу! 11 лет писал для тревел-журналов, потом кризис среднего возраста, желание перемен и внезапный переезд в Псков, где впервые почувствовал себя дома. Провожу экскурсии-погружения по местам, которые не оставят вас равнодушным. Приглашаю вас в путешествие по Изборску и живописным окрестностям — на пару часов или дней. Показываю и открываю самые живописные тропы, знакомлю с местными жителями — фермерами и ремесленниками, а из множества исторических фактов — выбираю действительно важные и интересные ;)',\n         'is_pro': False, 'company': None},\n        {'user': 9, 'surname': 'Левинова', 'full_name': 'Дина Левинова', 'tours_count': 1,\n         'bio': 'Авторизированный гид, член Ассоциации профессиональных гидов Хельсинки, член клуба Знатоков города и рабочей комиссии университета. По жизни: живу в Финляндии 35 лет. 23 из них - работала в турсфере, а также гидом для души, т.к. очень люблю это дело. Исходила город вдоль и поперек, замучала рассказами родных и друзей, прочитала сотню, а то и больше книг, и провела сотни часов в архивах. Н не перестаю находить новые интересные факты, истории, места, которые и хочу показать гостям. Покажу город дркгим, не так как о его обычно показывают и описывают в экскурсияя на один день из Питера и пишут в большистве путеводителей. Открою вам новый Хельсинки, каким его вижу я: с плюсами и минусами, поделюсь радостными и печальными фактами истории, а также секретами, легендами, реалиями сегодняшнего дня.',\n         'is_pro': True, 'company': None},\n        {'user': 10, 'surname': 'Звонкий', 'full_name': 'Марк Звонкий', 'tours_count': 1,\n         'bio': 'Спорю, что такой экскурсии у вас еще не было. Я организую туры с закрытыми глазами. Да-да, вы все верно прочитали. Но какой в этом смыcл, если ничего не видно? Без одного из главных органов восприятия, город ощущается совсем иначе. Вас ждет по-настоящему необычное путешествие, которое надолго запомнится своими хорошими эмоциями.',\n         'is_pro': False, 'company': None}]\n\n\nclass TestCase(unittest.TestCase):\n    def test(self):\n        try:\n            from task import update_tours_count, Guide\n        except ImportError:\n            self.fail(\"Не правильное имя класса update_tours_count, Guide\")\n        except sqlalchemy.exc.ArgumentError:\n            self.fail(\"Ошибка в синтаксисе модели, не задан атрибут primaryKey или что-то еще\")\n        try:\n            from task import db\n        except ImportError:\n            self.fail(\"Отсутствует переменная db, которая была изначально\")\n\n        db.drop_all()\n        db.create_all()\n\n        for d in data:\n            guide = Guide(id=d.get(\"user\"),\n                          surname=d.get(\"surname\"),\n                          full_name=d.get(\"full_name\"),\n                          tours_count=d.get(\"tours_count\"),\n                          bio=d.get(\"bio\"),\n                          is_pro=d.get(\"is_pro\"),\n                          company=d.get(\"company\"),\n                          )\n            with db.session.begin():\n                db.session.add(guide)\n\n        update_tours_count()\n\n        g = Guide.query.get(1)\n        self.assertEqual(g.tours_count, 6, msg=\"Количество туро после обновление равно \" + str(g.tours_count) + \", а должно равняться 6\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "# Skypro. Lesson 16. Part 1\n\n## Дано\n\nТаблица ‘guides’ с данными.\n\n\n## Надо\n\nОбновить количество туров у гида с id=1 на 6 (сделать tours_count = 6)",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "task7",
          "files" : {
            "task.py" : {
              "name" : "task.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "from flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy import Column, Integer, String, Boolean, Text, SmallInteger, ForeignKey, CheckConstraint\nfrom sqlalchemy.orm import relationship\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\n\n\nclass Guide(db.Model):\n    __tablename__ = 'guide'\n    id = Column(Integer, primary_key=True)\n    surname = Column(String)\n    full_name = Column(String)\n    tours_count = Column(Integer)\n    bio = Column(String)\n    is_pro = Column(Boolean)\n    company = Column(Integer)\n\n\ndef delete_guides():\n    pass\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nimport sqlalchemy\n\ndata = [{'user': 2, 'surname': 'Васечкин', 'full_name': 'Андрей Васечкин', 'tours_count': 5,\n         'bio': 'Я обожаю Москву, и изучаю город с необычных ракурсов. С радостью поделюсь с вами своими лучшими открытиями. Мы поднимемся на сталинские высотки и посмотрим на исторический центр сверху. Я покажу вам то, что скрыто от глаз большинства туристов и даже жителей города. Маршруты подобра индивидуально под ваш запрос. Для влюбленных доступна услуга свидания на крыше.',\n         'is_pro': True, 'company': 1},\n        {'user': 1, 'surname': 'Новикова', 'full_name': 'Людмила Новикова', 'tours_count': 2,\n         'bio': 'Я петербурженка в 7-м поколении. Люблю делиться историями и секретами дореволюционных петербургских зданий и особняков. Поделюсь историями моей бабушки. Вместе со мной работает небольшая дружная команда влюбленных в Петербург местных гидов. Мы раскроем вам секреты старинных домов и покажем то, что скрыто от глаз большинства туристов и жителей города.',\n         'is_pro': True, 'company': 2},\n        {'user': 3, 'surname': 'Беридзе', 'full_name': 'Георги Беридзе', 'tours_count': 5,\n         'bio': 'Филолог-журналист по образованию. За плечами более 9 лет экскурсий по Грузии и барменский опыт. Писатель. Перфекционист. И просто увлеченный человек. Родился и вырос в Тбилиси. Более 10-поколений тут. Люблю этот райский уголок на планете и свою работу. Мама-кулинар привила любовь ко вкусной еде.',\n         'is_pro': True, 'company': None},\n        {'user': 4, 'surname': 'Ласкина', 'full_name': 'Оксана Ласкина', 'tours_count': 2,\n         'bio': 'Я всегда увлекалась историей и, как следствие, получила образования гида-экскурсовода. С удовольствием знакомлю гостей города с историей, татарской культурой и традициями. Вы влюбитесь в наш край.',\n         'is_pro': True, 'company': 5},\n        {'user': 5, 'surname': 'Горячий', 'full_name': 'Иван Горячий', 'tours_count': 7,\n         'bio': 'Работал учителем истории более 10 лет, последние 5 лет живу в Сочи и уже третий год провожу экскурсии, орагнизовываю туры. На моих прогулках и турах вы узнаете не только об экскурсионных объектах, но и о том, чем живет современный Сочи: о ценах, недвижимости, об интересных местах города и его необычных заведениях. Есть туры разного уровня сложности и комфорта, где можно с детьми и без. Бесплатным бонусом ко всем экскурсиям станет фотосессия на зеркальный фотоаппарат.',\n         'is_pro': True, 'company': 4},\n        {'user': 6, 'surname': 'Ивлева', 'full_name': 'Яна Ивлева', 'tours_count': 5,\n         'bio': 'Я живу в Стамбуле много лет. По образованию филолог и историк. О Стамбуле читаю, пишу, живуэтим городом и люблю его. Раскрою его вам таким, какой он есть: великолепный, приветливый, неизменно интересный и всегда загадочный. Ваше путешествие по этому сказочному городу навсегда осталось в памяти и сердце. ',\n         'is_pro': True, 'company': 1},\n        {'user': 7, 'surname': 'Самидзе', 'full_name': 'Ирина Самидзе', 'tours_count': 1,\n         'bio': 'Живу в Риме уже более десяти лет и с каждым днем влюбляюсь в этот город все больше и больше. Моя миссия в том, чтобы и вы почувствовали после нашей прогулки то же самое. Приглашаю вас познакомиться с Вечным городом и увидеть его глазами местного жителя, прочувствовать всю атмосферу и колорит столицы. Насладиться видами, едой и историей этого города.',\n         'is_pro': False, 'company': None},\n        {'user': 8, 'surname': 'Ванькин', 'full_name': 'Владислав Ванькин', 'tours_count': 1,\n         'bio': 'Хеллоу! 11 лет писал для тревел-журналов, потом кризис среднего возраста, желание перемен и внезапный переезд в Псков, где впервые почувствовал себя дома. Провожу экскурсии-погружения по местам, которые не оставят вас равнодушным. Приглашаю вас в путешествие по Изборску и живописным окрестностям — на пару часов или дней. Показываю и открываю самые живописные тропы, знакомлю с местными жителями — фермерами и ремесленниками, а из множества исторических фактов — выбираю действительно важные и интересные ;)',\n         'is_pro': False, 'company': None},\n        {'user': 9, 'surname': 'Левинова', 'full_name': 'Дина Левинова', 'tours_count': 1,\n         'bio': 'Авторизированный гид, член Ассоциации профессиональных гидов Хельсинки, член клуба Знатоков города и рабочей комиссии университета. По жизни: живу в Финляндии 35 лет. 23 из них - работала в турсфере, а также гидом для души, т.к. очень люблю это дело. Исходила город вдоль и поперек, замучала рассказами родных и друзей, прочитала сотню, а то и больше книг, и провела сотни часов в архивах. Н не перестаю находить новые интересные факты, истории, места, которые и хочу показать гостям. Покажу город дркгим, не так как о его обычно показывают и описывают в экскурсияя на один день из Питера и пишут в большистве путеводителей. Открою вам новый Хельсинки, каким его вижу я: с плюсами и минусами, поделюсь радостными и печальными фактами истории, а также секретами, легендами, реалиями сегодняшнего дня.',\n         'is_pro': True, 'company': None},\n        {'user': 10, 'surname': 'Звонкий', 'full_name': 'Марк Звонкий', 'tours_count': 1,\n         'bio': 'Спорю, что такой экскурсии у вас еще не было. Я организую туры с закрытыми глазами. Да-да, вы все верно прочитали. Но какой в этом смыcл, если ничего не видно? Без одного из главных органов восприятия, город ощущается совсем иначе. Вас ждет по-настоящему необычное путешествие, которое надолго запомнится своими хорошими эмоциями.',\n         'is_pro': False, 'company': None}]\n\n\nclass TestCase(unittest.TestCase):\n    def test(self):\n        try:\n            from task import delete_guides, Guide\n        except ImportError:\n            self.fail(\"Не правильное имя класса delete_guides, Guide\")\n        except sqlalchemy.exc.ArgumentError:\n            self.fail(\"Ошибка в синтаксисе модели, не задан атрибут primaryKey или что-то еще\")\n        try:\n            from task import db\n        except ImportError:\n            self.fail(\"Отсутствует переменная db, которая была изначально\")\n\n        db.drop_all()\n        db.create_all()\n\n        for d in data:\n            guide = Guide(id=d.get(\"user\"),\n                          surname=d.get(\"surname\"),\n                          full_name=d.get(\"full_name\"),\n                          tours_count=d.get(\"tours_count\"),\n                          bio=d.get(\"bio\"),\n                          is_pro=d.get(\"is_pro\"),\n                          company=d.get(\"company\"),\n                          )\n            with db.session.begin():\n                db.session.add(guide)\n\n        delete_guides()\n\n        g = Guide.query.get(1)\n        self.assertEqual(g, None, msg=\"Гид с id=1 не удален\")\n        g = Guide.query.get(4)\n        self.assertEqual(g, None, msg=\"Гид с id=4 не удален\")\n        g = Guide.query.get(7)\n        self.assertEqual(g, None, msg=\"Гид с id=7 не удален\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "# Skypro. Lesson 16. Part 1\n\n## Дано\n\nТаблица ‘guides’ с данными.\n\n\n## Надо\n\nУдалить гидов с id=1, 4 и 7",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "task8",
          "files" : {
            "task.py" : {
              "name" : "task.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "import json\n\nfrom flask import Flask, request\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy import Column, Integer, String, Boolean, Text, SmallInteger, ForeignKey, CheckConstraint\nfrom sqlalchemy.orm import relationship\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\n\n\nclass Guide(db.Model):\n    __tablename__ = 'guide'\n    id = Column(Integer, primary_key=True)\n    surname = Column(String)\n    full_name = Column(String)\n    tours_count = Column(Integer)\n    bio = Column(String)\n    is_pro = Column(Boolean)\n    company = Column(Integer)\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import json\nimport re\nimport unittest\n\nimport sqlalchemy\nfrom task import db, app\n\ndata = [{'user': 2, 'surname': 'Васечкин', 'full_name': 'Андрей Васечкин', 'tours_count': 5,\n         'bio': 'Я обожаю Москву, и изучаю город с необычных ракурсов. С радостью поделюсь с вами своими лучшими открытиями. Мы поднимемся на сталинские высотки и посмотрим на исторический центр сверху. Я покажу вам то, что скрыто от глаз большинства туристов и даже жителей города. Маршруты подобра индивидуально под ваш запрос. Для влюбленных доступна услуга свидания на крыше.',\n         'is_pro': True, 'company': 1},\n        {'user': 1, 'surname': 'Новикова', 'full_name': 'Людмила Новикова', 'tours_count': 2,\n         'bio': 'Я петербурженка в 7-м поколении. Люблю делиться историями и секретами дореволюционных петербургских зданий и особняков. Поделюсь историями моей бабушки. Вместе со мной работает небольшая дружная команда влюбленных в Петербург местных гидов. Мы раскроем вам секреты старинных домов и покажем то, что скрыто от глаз большинства туристов и жителей города.',\n         'is_pro': True, 'company': 2},\n        {'user': 3, 'surname': 'Беридзе', 'full_name': 'Георги Беридзе', 'tours_count': 5,\n         'bio': 'Филолог-журналист по образованию. За плечами более 9 лет экскурсий по Грузии и барменский опыт. Писатель. Перфекционист. И просто увлеченный человек. Родился и вырос в Тбилиси. Более 10-поколений тут. Люблю этот райский уголок на планете и свою работу. Мама-кулинар привила любовь ко вкусной еде.',\n         'is_pro': True, 'company': None},\n        {'user': 4, 'surname': 'Ласкина', 'full_name': 'Оксана Ласкина', 'tours_count': 2,\n         'bio': 'Я всегда увлекалась историей и, как следствие, получила образования гида-экскурсовода. С удовольствием знакомлю гостей города с историей, татарской культурой и традициями. Вы влюбитесь в наш край.',\n         'is_pro': True, 'company': 5},\n        {'user': 5, 'surname': 'Горячий', 'full_name': 'Иван Горячий', 'tours_count': 7,\n         'bio': 'Работал учителем истории более 10 лет, последние 5 лет живу в Сочи и уже третий год провожу экскурсии, орагнизовываю туры. На моих прогулках и турах вы узнаете не только об экскурсионных объектах, но и о том, чем живет современный Сочи: о ценах, недвижимости, об интересных местах города и его необычных заведениях. Есть туры разного уровня сложности и комфорта, где можно с детьми и без. Бесплатным бонусом ко всем экскурсиям станет фотосессия на зеркальный фотоаппарат.',\n         'is_pro': True, 'company': 4},\n        {'user': 6, 'surname': 'Ивлева', 'full_name': 'Яна Ивлева', 'tours_count': 5,\n         'bio': 'Я живу в Стамбуле много лет. По образованию филолог и историк. О Стамбуле читаю, пишу, живуэтим городом и люблю его. Раскрою его вам таким, какой он есть: великолепный, приветливый, неизменно интересный и всегда загадочный. Ваше путешествие по этому сказочному городу навсегда осталось в памяти и сердце. ',\n         'is_pro': True, 'company': 1},\n        {'user': 7, 'surname': 'Самидзе', 'full_name': 'Ирина Самидзе', 'tours_count': 1,\n         'bio': 'Живу в Риме уже более десяти лет и с каждым днем влюбляюсь в этот город все больше и больше. Моя миссия в том, чтобы и вы почувствовали после нашей прогулки то же самое. Приглашаю вас познакомиться с Вечным городом и увидеть его глазами местного жителя, прочувствовать всю атмосферу и колорит столицы. Насладиться видами, едой и историей этого города.',\n         'is_pro': False, 'company': None},\n        {'user': 8, 'surname': 'Ванькин', 'full_name': 'Владислав Ванькин', 'tours_count': 1,\n         'bio': 'Хеллоу! 11 лет писал для тревел-журналов, потом кризис среднего возраста, желание перемен и внезапный переезд в Псков, где впервые почувствовал себя дома. Провожу экскурсии-погружения по местам, которые не оставят вас равнодушным. Приглашаю вас в путешествие по Изборску и живописным окрестностям — на пару часов или дней. Показываю и открываю самые живописные тропы, знакомлю с местными жителями — фермерами и ремесленниками, а из множества исторических фактов — выбираю действительно важные и интересные ;)',\n         'is_pro': False, 'company': None},\n        {'user': 9, 'surname': 'Левинова', 'full_name': 'Дина Левинова', 'tours_count': 1,\n         'bio': 'Авторизированный гид, член Ассоциации профессиональных гидов Хельсинки, член клуба Знатоков города и рабочей комиссии университета. По жизни: живу в Финляндии 35 лет. 23 из них - работала в турсфере, а также гидом для души, т.к. очень люблю это дело. Исходила город вдоль и поперек, замучала рассказами родных и друзей, прочитала сотню, а то и больше книг, и провела сотни часов в архивах. Н не перестаю находить новые интересные факты, истории, места, которые и хочу показать гостям. Покажу город дркгим, не так как о его обычно показывают и описывают в экскурсияя на один день из Питера и пишут в большистве путеводителей. Открою вам новый Хельсинки, каким его вижу я: с плюсами и минусами, поделюсь радостными и печальными фактами истории, а также секретами, легендами, реалиями сегодняшнего дня.',\n         'is_pro': True, 'company': None},\n        {'user': 10, 'surname': 'Звонкий', 'full_name': 'Марк Звонкий', 'tours_count': 1,\n         'bio': 'Спорю, что такой экскурсии у вас еще не было. Я организую туры с закрытыми глазами. Да-да, вы все верно прочитали. Но какой в этом смыcл, если ничего не видно? Без одного из главных органов восприятия, город ощущается совсем иначе. Вас ждет по-настоящему необычное путешествие, которое надолго запомнится своими хорошими эмоциями.',\n         'is_pro': False, 'company': None}]\n\n\nclass TestCase(unittest.TestCase):\n\n    @classmethod\n    def setUpClass(self):\n        try:\n            from task import Guide\n        except ImportError:\n            assert False, \"Не правильное имя класса Guide\"\n        except sqlalchemy.exc.ArgumentError:\n            assert False, \"Ошибка в синтаксисе модели, не задан атрибут primaryKey или что-то еще\"\n\n        db.drop_all()\n        db.create_all()\n\n        for d in data:\n            guide = Guide(id=d.get(\"user\"),\n                          surname=d.get(\"surname\"),\n                          full_name=d.get(\"full_name\"),\n                          tours_count=d.get(\"tours_count\"),\n                          bio=d.get(\"bio\"),\n                          is_pro=d.get(\"is_pro\"),\n                          company=d.get(\"company\"),\n                          )\n            with db.session.begin():\n                db.session.add(guide)\n\n    def test_guide_by_tours_count(self):\n        with app.app_context():\n            address = \"/guides?tours_count=1\"\n            app.testing = True\n            response = app.test_client().get(address)\n        d = json.loads(response.data.decode('utf-8'))\n        self.assertEqual(len(d), 4, msg=\"Не правильно работает запрос к таблице\")\n\n    def test_guide_by_id(self):\n        with app.app_context():\n            address = \"/guides/1\"\n            app.testing = True\n            response = app.test_client().get(address)\n        d = json.loads(response.data.decode('utf-8'))\n        self.assertTrue(isinstance(d, dict), msg=\"Вернулся не JSON, может быть массив?\")\n        self.assertTrue(d.get(\"surname\") == \"Новикова\", msg=\"Не правильно работает запрос к таблице\")\n\n    def test_all_guides(self):\n        with app.app_context():\n            address = \"/guides\"\n            app.testing = True\n            response = app.test_client().get(address)\n        d = json.loads(response.data.decode('utf-8'))\n        self.assertTrue(isinstance(d, list), msg=\"Вернулся не JSON массив, может быть объект?\")\n        self.assertEqual(len(d), 10, msg=\"Не правильно работает запрос к таблице\")\n\n    def test_delete_guide_by_id(self):\n        with app.app_context():\n            address = \"/guides/2\"\n            app.testing = True\n            response = app.test_client().post(address)\n\n        from task import Guide\n        g = Guide.query.get(2)\n        self.assertEqual(g, None, msg=\"Гид не удаляется\")\n\n    def test_update_guide_by_id(self):\n        with app.app_context():\n            address = \"/guides/3\"\n            app.testing = True\n            d = {\n                \"surname\": \"update guide surname\",\n                \"full_name\": \"update guide full_name\",\n                \"tours_count\": 89\n            }\n            app.test_client().put(address, data=json.dumps(d))\n\n        from task import Guide\n        g = Guide.query.get(3)\n        self.assertEqual(g.surname, \"update guide surname\", msg=\"Гид не обновился\")\n        self.assertEqual(g.full_name, \"update guide full_name\", msg=\"Гид не обновился\")\n        self.assertEqual(g.tours_count, 89, msg=\"Гид не обновился\")"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "# Skypro. Lesson 16. Part 1\n\n# Дано\nТаблица `guides`.\n\n# Надо\n\nСделать несколько Flask роутов с логикой работы с БД и таблицей `guides` при помощи модели `Guide`\n\n## Роут 1\nНаписать роут на фласке для поиска гида по полю tours_count\n\nHTTP Method: `GET`\n\nExample Request URL: `/guides?tours_count=1`\n\nResponse: JSON массив с гидами\n\n## Роут 2\nНаписать роут на фласке для получения гида по id\n\nHTTP Method: `GET`\n\nExample Request URL: `/guides/1`\n\nResponse: JSON объект с гидом\n\n## Роут 3\nНаписать роут на фласке для получения всех гидов\n\nHTTP Method: `GET`\n\nExample Request URL: `/guides`\n\nResponse: JSON массив с гидами\n\n## Роут 4\nНаписать роут на фласке для удаления гида по id\n\nHTTP Method: `POST`\n\nExample Request URL: `/guides/2`\n\n## Роут 5\nНаписать роут на фласке для частичного обновления гида по id\nОбновление должно работать для следующих полей:\n- `surname`\n- `full_name`\n- `tours_count`\n\nПоля с обновленной информацией могут прийти как все, так и только одно поле.\n\nПример всех полей:\n```json \n{\n\"surname\": \"changed\",\n\"full_name\": \"changed\",\n\"tours_count\": 89\n}\n```\n\nПример 1 поля:\n```json\n{\n\"tours_count\": 89\n}\n```\n\nHTTP Method: `PUT`\n\nExample Body:\n```json\n{\n\"surname\": \"changed\",\n\"full_name\": \"changed\",\n\"tours_count\": 89\n}\n```\n\nExample Request URL: `/guides/3`\n\nReponse: JSON объект с гидом\n\n_Hint_: JSON обновления получать из request.data или request.json\n",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    }
  ],
  "additional_files" : [
    {
      "name" : "requirements.txt",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "click==8.0.1\nFlask==2.0.1\nFlask-SQLAlchemy==2.5.1\ngreenlet==1.1.1\nitsdangerous==2.0.1\nJinja2==3.0.1\nMarkupSafe==2.0.1\nSQLAlchemy==1.4.23\nWerkzeug==2.0.1\n"
    }
  ],
  "version" : 11
}