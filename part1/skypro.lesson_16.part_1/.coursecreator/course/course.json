{
  "environment" : "unittest",
  "summary" : "Skypro. Урок 16. Часть 1",
  "title" : "skypro.lesson_16.part_1",
  "authors" : [
    "Skypro"
  ],
  "programming_language" : "Python",
  "language" : "en",
  "course_type" : "PyCharm",
  "items" : [
    {
      "title" : "lesson1",
      "task_list" : [
        {
          "name" : "task3",
          "files" : {
            "task.py" : {
              "name" : "task.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "from flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy import Column, Integer, String, Boolean, Text, SmallInteger, ForeignKey, CheckConstraint\nfrom sqlalchemy.orm import relationship\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\ndb = SQLAlchemy(app)\n\n\nclass City(db.Model):\n    __tablename__ = 'city'\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom task import db, City\n\ndata = [{'name': 'Рим', 'timezone': 'GMT+1', 'country': 3, 'country_ru': 'Италия', 'id': 1},\n        {'name': 'Милан', 'timezone': 'GMT+1', 'country': 3, 'country_ru': 'Италия', 'id': 2},\n        {'name': 'Венеция', 'timezone': 'GMT+1', 'country': 3, 'country_ru': 'Италия', 'id': 3},\n        {'name': 'Стамбул', 'timezone': 'GMT+3', 'country': 4, 'country_ru': 'Турция', 'id': 4},\n        {'name': 'Кемер', 'timezone': 'GMT+3', 'country': 4, 'country_ru': 'Турция', 'id': 5},\n        {'name': 'Сиде', 'timezone': 'GMT+3', 'country': 4, 'country_ru': 'Турция', 'id': 6},\n        {'name': 'Тбилиси', 'timezone': 'GMT+4', 'country': 2, 'country_ru': 'Грузия', 'id': 7},\n        {'name': 'Казбеги', 'timezone': 'GMT+4', 'country': 2, 'country_ru': 'Грузия', 'id': 8},\n        {'name': 'Хельсинки', 'timezone': 'GMT+2', 'country': 5, 'country_ru': 'Финляндия', 'id': 9},\n        {'name': 'Санкт-Петербург', 'timezone': 'GMT+3', 'country': 1, 'country_ru': 'Россия', 'id': 10}]\n\n\nclass TestCase(unittest.TestCase):\n    def test(self):\n        db.drop_all()\n        db.create_all()\n\n        for d in data:\n            city = City(id=d.get(\"id\"),\n                        name=d.get(\"name\"),\n                        timezone=d.get(\"timezone\"),\n                        country=d.get(\"country\"),\n                        country_ru=d.get(\"country_ru\")\n                        )\n\n            with db.session.begin():\n                db.session.add(city)\n\n        try:\n            City.query.all()\n        except Exception as e:\n            self.fail(msg=\"Не верная модель\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "# Skypro. Lesson 16. Part 1\n\n## Дано\n\nТаблица ‘city’ с данными.\n\n\n## Надо\n\nСоздайте модель по таблице ‘city’",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "task4",
          "files" : {
            "task.py" : {
              "name" : "task.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "from flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy import Column, Integer, String, Boolean, Text, SmallInteger, ForeignKey, CheckConstraint\nfrom sqlalchemy.orm import relationship\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\n\n\nclass City(db.Model):\n    __tablename__ = 'city'\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    timezone = Column(String)\n    country = Column(Integer)\n    country_ru = Column(String)\n\n\ndb.drop_all()\ndb.create_all()"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nimport sqlalchemy\nfrom task import db\n\n\nclass TestCase(unittest.TestCase):\n    def test(self):\n        try:\n            from task import City\n        except ImportError:\n            assert False, \"Не правильное имя класса City\"\n        except sqlalchemy.exc.ArgumentError:\n            assert False, \"Ошибка в синтаксисе модели, не задан атрибут primaryKey или что-то еще\"\n\n        try:\n            d = City.query.all()\n            self.assertEqual(len(d), 10, msg=\"Не все данные вставились или не вставились\")\n        except Exception as e:\n            self.fail(msg=\"Не верная модель\")\n"
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "# Skypro. Lesson 16. Part 1\n\n## Дано\n\nДана модель, есть табличка `city` с данными.\n\n## Надо\n\nНеобходимо добавить в таблицу эти данные.",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "task5",
          "files" : {
            "task.py" : {
              "name" : "task.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "from flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy import Column, Integer, String, Boolean, Text, SmallInteger, ForeignKey, CheckConstraint\nfrom sqlalchemy.orm import relationship\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\n\n\nclass User(db.Model):\n    __tablename__ = 'user'\n    id = Column(Integer, primary_key=True)\n    email = Column(String)\n    password = Column(String)\n    full_name = Column(String)\n    city = Column(Integer)\n    city_ru = Column(String)\n\n\ndb.drop_all()\ndb.create_all()\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nimport sqlalchemy\nfrom task import db\n\n\nclass TestCase(unittest.TestCase):\n    def test(self):\n        try:\n            from task import User\n        except ImportError:\n            assert False, \"Не правильное имя класса User\"\n        except sqlalchemy.exc.ArgumentError:\n            assert False, \"Ошибка в синтаксисе модели, не задан атрибут primaryKey или что-то еще\"\n\n        try:\n            d = User.query.all()\n            self.assertEqual(len(d), 10, msg=\"Не все данные вставились или не вставились\")\n        except Exception as e:\n            self.fail(msg=\"Не верная модель\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "# Skypro. Lesson 16. Part 1\n\n## Дано\n\nДана модель User, есть табличка `user`\nДанные таблицы в табличном виде.\n\n## Надо\n\nНеобходимо добавить в таблицу эти данные в коде.",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "task6",
          "files" : {
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "task.py" : {
              "name" : "task.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "from flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy import Column, Integer, String, Boolean, Text, SmallInteger, ForeignKey, CheckConstraint\nfrom sqlalchemy.orm import relationship\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\n\n\nclass User(db.Model):\n    __tablename__ = 'user'\n    id = Column(Integer, primary_key=True)\n    email = Column(String)\n    password = Column(String)\n    full_name = Column(String)\n    city = Column(Integer)\n    city_ru = Column(String)\n\n\ndef get_all():\n    return all_users\n\n\ndef get_one(id: int):\n    return one_user\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nimport sqlalchemy\nfrom task import db, get_all, get_one\n\n\nclass TestCase(unittest.TestCase):\n    def test(self):\n        try:\n            from task import User\n        except ImportError:\n            assert False, \"Не правильное имя класса User\"\n        except sqlalchemy.exc.ArgumentError:\n            assert False, \"Ошибка в синтаксисе модели, не задан атрибут primaryKey или что-то еще\"\n\n\n        db.drop_all()\n        db.create_all()\n\n        data = [{'email': 'novlu@mail.com', 'password': 'mkdXjIjYM', 'full_name': 'Людмила Новикова', 'city': 10,\n                 'city_ru': 'Санкт-Петербург', 'id': 1},\n                {'email': 'tripper678@yahhaa.com', 'password': 'eGGPtRKS5', 'full_name': 'Андрей Васечкин', 'city': 11,\n                 'city_ru': 'Москва', 'id': 2},\n                {'email': 'georgiberidze@mail.com', 'password': 'NWRV0Z9ZC', 'full_name': 'Георги Беридзе', 'city': 7,\n                 'city_ru': 'Тбилиси', 'id': 3},\n                {'email': 'oksi.laslas89@mail.com', 'password': 'TenhtQOjv', 'full_name': 'Оксана Ласкина', 'city': 12,\n                 'city_ru': 'Казань', 'id': 4},\n                {'email': 'vanyahot888@inmail.com', 'password': '5YGRPtYlw', 'full_name': 'Иван Горячий', 'city': 13,\n                 'city_ru': 'Сочи', 'id': 5},\n                {'email': 'yanaturkiy@mail.com', 'password': 'rN3HI4elT', 'full_name': 'Яна Ивлева', 'city': 4,\n                 'city_ru': 'Стамбул', 'id': 6},\n                {'email': 'irafromrome@yahhaa.com', 'password': 'mWmSmkNsD', 'full_name': 'Ирина Самидзе', 'city': 1,\n                 'city_ru': 'Рим', 'id': 7},\n                {'email': 'pskovstalker@mail.com', 'password': 'M572gH5lG', 'full_name': 'Владислав Ванькин', 'city': 14,\n                 'city_ru': 'Псков', 'id': 8},\n                {'email': 'dinadina13@mail.com', 'password': 'v2dSbgPYb', 'full_name': 'Дина Левинова', 'city': 9,\n                 'city_ru': 'Хельсинки', 'id': 9},\n                {'email': 'mark.loud@mail.com', 'password': 'pz4ZIYu1l', 'full_name': 'Марк Звонкий', 'city': 15,\n                 'city_ru': 'Нижний Новгород', 'id': 10}]\n\n        for d in data:\n            user = User(\n                id=d.get(\"id\"),\n                email=d.get(\"email\"),\n                password=d.get(\"password\"),\n                full_name=d.get(\"full_name\"),\n                city=d.get(\"user\"),\n                city_ru=d.get(\"city_ru\"),\n            )\n\n            with db.session.begin():\n                db.session.add(user)\n\n        user = get_one(10)\n        self.assertEqual(user.email, \"mark.loud@mail.com\", msg=\"Не верно работает функция get_one\")\n        users = get_all()\n        print(len(users))\n        self.assertEqual(len(users), 10, msg=\"Не верно работает функция get_all\")\n        print(users[9].email)\n        self.assertEqual(users[9].email, \"mark.loud@mail.com\", msg=\"Не верно работает функция get_all\")"
            }
          },
          "description_text" : "# Skypro. Lesson 16. Part 1\n\n## Дано\n\nДана модель. Создана таблица.\nДанные таблицы в табличном виде.\n\n\n## Надо\n\nПолучить все записи и Получить одну запись",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "task7",
          "files" : {
            "task.py" : {
              "name" : "task.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "import json\n\nfrom flask import Flask, request\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy import Column, Integer, String, Boolean, Text, SmallInteger, ForeignKey, CheckConstraint\nfrom sqlalchemy.orm import relationship\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\n\n\nclass Guide(db.Model):\n    __tablename__ = 'user'\n    id = Column(Integer, primary_key=True)\n    surname = Column(String)\n    full_name = Column(String)\n    tours_count = Column(Integer)\n    bio = Column(String)\n    is_pro = Column(Boolean)\n    company = Column(Integer)\n\n@app.route(\"/guides\")\ndef get_guides():\n    guides = Guide.query.filter(Guide.company > 2).all()\n    r = []\n    for g in guides:\n        if len(r) == 3:\n            break\n        r.append({\n            \"surname\": g.surname,\n        })\n\n    return r\n\n\n@app.route(\"/guides/\", )\ndef get_user(gid: int):\n    g = Guide.query.get(gid)\n    return {\n        \"surname\": g.surname,\n    }"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import json\nimport re\nimport unittest\n\nimport sqlalchemy\nfrom task import db, app\n\ndata = [{'user': 2, 'surname': 'Васечкин', 'full_name': 'Андрей Васечкин', 'tours_count': 5,\n         'bio': 'Я обожаю Москву, и изучаю город с необычных ракурсов. С радостью поделюсь с вами своими лучшими открытиями. Мы поднимемся на сталинские высотки и посмотрим на исторический центр сверху. Я покажу вам то, что скрыто от глаз большинства туристов и даже жителей города. Маршруты подобра индивидуально под ваш запрос. Для влюбленных доступна услуга свидания на крыше.',\n         'is_pro': True, 'company': 1},\n        {'user': 1, 'surname': 'Новикова', 'full_name': 'Людмила Новикова', 'tours_count': 2,\n         'bio': 'Я петербурженка в 7-м поколении. Люблю делиться историями и секретами дореволюционных петербургских зданий и особняков. Поделюсь историями моей бабушки. Вместе со мной работает небольшая дружная команда влюбленных в Петербург местных гидов. Мы раскроем вам секреты старинных домов и покажем то, что скрыто от глаз большинства туристов и жителей города.',\n         'is_pro': True, 'company': 2},\n        {'user': 3, 'surname': 'Беридзе', 'full_name': 'Георги Беридзе', 'tours_count': 5,\n         'bio': 'Филолог-журналист по образованию. За плечами более 9 лет экскурсий по Грузии и барменский опыт. Писатель. Перфекционист. И просто увлеченный человек. Родился и вырос в Тбилиси. Более 10-поколений тут. Люблю этот райский уголок на планете и свою работу. Мама-кулинар привила любовь ко вкусной еде.',\n         'is_pro': True, 'company': None},\n        {'user': 4, 'surname': 'Ласкина', 'full_name': 'Оксана Ласкина', 'tours_count': 2,\n         'bio': 'Я всегда увлекалась историей и, как следствие, получила образования гида-экскурсовода. С удовольствием знакомлю гостей города с историей, татарской культурой и традициями. Вы влюбитесь в наш край.',\n         'is_pro': True, 'company': 5},\n        {'user': 5, 'surname': 'Горячий', 'full_name': 'Иван Горячий', 'tours_count': 7,\n         'bio': 'Работал учителем истории более 10 лет, последние 5 лет живу в Сочи и уже третий год провожу экскурсии, орагнизовываю туры. На моих прогулках и турах вы узнаете не только об экскурсионных объектах, но и о том, чем живет современный Сочи: о ценах, недвижимости, об интересных местах города и его необычных заведениях. Есть туры разного уровня сложности и комфорта, где можно с детьми и без. Бесплатным бонусом ко всем экскурсиям станет фотосессия на зеркальный фотоаппарат.',\n         'is_pro': True, 'company': 4},\n        {'user': 6, 'surname': 'Ивлева', 'full_name': 'Яна Ивлева', 'tours_count': 5,\n         'bio': 'Я живу в Стамбуле много лет. По образованию филолог и историк. О Стамбуле читаю, пишу, живуэтим городом и люблю его. Раскрою его вам таким, какой он есть: великолепный, приветливый, неизменно интересный и всегда загадочный. Ваше путешествие по этому сказочному городу навсегда осталось в памяти и сердце. ',\n         'is_pro': True, 'company': 1},\n        {'user': 7, 'surname': 'Самидзе', 'full_name': 'Ирина Самидзе', 'tours_count': 1,\n         'bio': 'Живу в Риме уже более десяти лет и с каждым днем влюбляюсь в этот город все больше и больше. Моя миссия в том, чтобы и вы почувствовали после нашей прогулки то же самое. Приглашаю вас познакомиться с Вечным городом и увидеть его глазами местного жителя, прочувствовать всю атмосферу и колорит столицы. Насладиться видами, едой и историей этого города.',\n         'is_pro': False, 'company': None},\n        {'user': 8, 'surname': 'Ванькин', 'full_name': 'Владислав Ванькин', 'tours_count': 1,\n         'bio': 'Хеллоу! 11 лет писал для тревел-журналов, потом кризис среднего возраста, желание перемен и внезапный переезд в Псков, где впервые почувствовал себя дома. Провожу экскурсии-погружения по местам, которые не оставят вас равнодушным. Приглашаю вас в путешествие по Изборску и живописным окрестностям — на пару часов или дней. Показываю и открываю самые живописные тропы, знакомлю с местными жителями — фермерами и ремесленниками, а из множества исторических фактов — выбираю действительно важные и интересные ;)',\n         'is_pro': False, 'company': None},\n        {'user': 9, 'surname': 'Левинова', 'full_name': 'Дина Левинова', 'tours_count': 1,\n         'bio': 'Авторизированный гид, член Ассоциации профессиональных гидов Хельсинки, член клуба Знатоков города и рабочей комиссии университета. По жизни: живу в Финляндии 35 лет. 23 из них - работала в турсфере, а также гидом для души, т.к. очень люблю это дело. Исходила город вдоль и поперек, замучала рассказами родных и друзей, прочитала сотню, а то и больше книг, и провела сотни часов в архивах. Н не перестаю находить новые интересные факты, истории, места, которые и хочу показать гостям. Покажу город дркгим, не так как о его обычно показывают и описывают в экскурсияя на один день из Питера и пишут в большистве путеводителей. Открою вам новый Хельсинки, каким его вижу я: с плюсами и минусами, поделюсь радостными и печальными фактами истории, а также секретами, легендами, реалиями сегодняшнего дня.',\n         'is_pro': True, 'company': None},\n        {'user': 10, 'surname': 'Звонкий', 'full_name': 'Марк Звонкий', 'tours_count': 1,\n         'bio': 'Спорю, что такой экскурсии у вас еще не было. Я организую туры с закрытыми глазами. Да-да, вы все верно прочитали. Но какой в этом смыcл, если ничего не видно? Без одного из главных органов восприятия, город ощущается совсем иначе. Вас ждет по-настоящему необычное путешествие, которое надолго запомнится своими хорошими эмоциями.',\n         'is_pro': False, 'company': None}]\n\n\n\nclass TestCase(unittest.TestCase):\n\n    @classmethod\n    def setUpClass(self):\n        try:\n            from task import Guide\n        except ImportError:\n            assert False, \"Не правильное имя класса Guide\"\n        except sqlalchemy.exc.ArgumentError:\n            assert False, \"Ошибка в синтаксисе модели, не задан атрибут primaryKey или что-то еще\"\n\n        try:\n            from task import db\n        except ImportError:\n            assert False, \"Отсутствует переменная db, которая была изначально\"\n\n        db.drop_all()\n        db.create_all()\n\n        for d in data:\n            guide = Guide(id=d.get(\"user\"),\n                          surname=d.get(\"surname\"),\n                          full_name=d.get(\"full_name\"),\n                          tours_count=d.get(\"tours_count\"),\n                          bio=d.get(\"bio\"),\n                          is_pro=d.get(\"is_pro\"),\n                          company=d.get(\"company\"),\n                          )\n            with db.session.begin():\n                db.session.add(guide)\n\n    def test_guide_by_id(self):\n        with app.app_context():\n            address = \"/guides/1\"\n            app.testing = True\n            response = app.test_client().get(address)\n        d = json.loads(response.data.decode('utf-8'))\n        self.assertTrue(isinstance(d, dict), msg=\"Вернулся не JSON объект. Может быть массив?\")\n        self.assertTrue(d.get(\"full_name\") == \"Людмила Новикова\", msg=\"Не правильно работает запрос к таблице\")\n\n    def test_all_guides(self):\n        with app.app_context():\n            address = \"/guides\"\n            app.testing = True\n            response = app.test_client().get(address)\n        d = json.loads(response.data.decode('utf-8'))\n        self.assertTrue(isinstance(d, list), msg=\"Вернулся не JSON массив, может быть объект?\")\n        self.assertEqual(len(d), 10, msg=\"Не правильно работает запрос к таблице\")"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "# Skypro. Lesson 16. Part 1\n\n## Дано\n\nGuide JSON:\n```json\n    \n```\n\nЕсть наполненная БД с таблицей `guide`.\nЕсть полуготовый код на фласке. \n\n## view\n### get_guide\nMethod: GET\n\nURL: /guides/1\n\nResponse:\n\n{\n    <guide_json>\n}\n\n### get_guides\nMethod: GET\n\nURL: /guides\n\nResponse:\n[{guide_json}, {guide_json}, {guide_json}]\n\n\n## Надо\n\nДописать код.",
          "description_format" : "MD",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    }
  ],
  "additional_files" : [
    {
      "name" : "requirements.txt",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "click==8.0.1\nFlask==2.0.1\nFlask-SQLAlchemy==2.5.1\ngreenlet==1.1.1\nitsdangerous==2.0.1\nJinja2==3.0.1\nMarkupSafe==2.0.1\nSQLAlchemy==1.4.23\nWerkzeug==2.0.1\n"
    }
  ],
  "version" : 11
}